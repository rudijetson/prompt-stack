"""
Demo mode utilities for development and testing.
"""

import random
import time
from typing import Dict, List, Any
from datetime import datetime, timedelta


class DemoService:
    """Service for handling demo mode functionality."""
    
    @staticmethod
    def generate_demo_text(prompt: str, model: str = "demo") -> Dict[str, Any]:
        """Generate demo text response."""
        responses = [
            "This is a demo response. In production, this would be generated by the AI model.",
            "Demo mode is active. Configure your API keys to use real AI models.",
            "Here's a sample response to demonstrate the API functionality.",
            f"I received your prompt: '{prompt[:50]}...' - This is a demo response.",
            "In real mode, this would be a sophisticated AI-generated response.",
        ]
        
        # Simulate processing time
        time.sleep(random.uniform(0.5, 1.5))
        
        return {
            "text": random.choice(responses),
            "model": model,
            "usage": {
                "prompt_tokens": len(prompt.split()),
                "completion_tokens": random.randint(50, 150),
                "total_tokens": len(prompt.split()) + random.randint(50, 150)
            },
            "demo_mode": True,
            "created_at": datetime.utcnow().isoformat()
        }
    
    @staticmethod
    def generate_demo_embedding(text: str) -> List[float]:
        """Generate demo embedding vector."""
        # Generate a consistent but fake embedding
        base = sum(ord(c) for c in text) / len(text)
        return [base + random.uniform(-0.5, 0.5) for _ in range(384)]
    
    @staticmethod
    def generate_demo_completion(messages: List[Dict[str, str]]) -> Dict[str, Any]:
        """Generate demo chat completion."""
        last_message = messages[-1]["content"] if messages else "Hello"
        
        responses = {
            "hello": "Hello! I'm running in demo mode. How can I help you today?",
            "help": "I'm a demo assistant. Configure API keys to use real AI models.",
            "test": "Test successful! The API is working correctly in demo mode.",
        }
        
        # Check for keywords
        lower_content = last_message.lower()
        for keyword, response in responses.items():
            if keyword in lower_content:
                return {
                    "choices": [{
                        "message": {
                            "role": "assistant",
                            "content": response
                        },
                        "finish_reason": "stop"
                    }],
                    "model": "demo",
                    "usage": {
                        "prompt_tokens": sum(len(m["content"].split()) for m in messages),
                        "completion_tokens": len(response.split()),
                        "total_tokens": sum(len(m["content"].split()) for m in messages) + len(response.split())
                    },
                    "demo_mode": True
                }
        
        # Default response
        return {
            "choices": [{
                "message": {
                    "role": "assistant",
                    "content": f"Demo response to: {last_message[:100]}..."
                },
                "finish_reason": "stop"
            }],
            "model": "demo",
            "demo_mode": True
        }
    
    @staticmethod
    def generate_demo_user(email: str) -> Dict[str, Any]:
        """Generate demo user data."""
        user_id = f"demo_{hash(email) % 100000}"
        return {
            "id": user_id,
            "email": email,
            "created_at": datetime.utcnow().isoformat(),
            "demo_mode": True,
            "metadata": {
                "demo_user": True,
                "created_via": "demo_auth"
            }
        }
    
    @staticmethod
    def generate_demo_session(user_id: str) -> Dict[str, Any]:
        """Generate demo session data."""
        return {
            "access_token": f"demo_token_{user_id}_{int(time.time())}",
            "token_type": "bearer",
            "expires_in": 3600,
            "expires_at": (datetime.utcnow() + timedelta(hours=1)).isoformat(),
            "demo_mode": True
        }
    
    @staticmethod
    def is_demo_mode(supabase_url: str = "", openai_key: str = "", demo_mode_env: str = "") -> bool:
        """Check if running in demo mode."""
        # Demo mode if explicitly set or if no real services configured
        if demo_mode_env and demo_mode_env.lower() in ("true", "1", "yes"):
            return True
        # If no services configured, default to demo mode
        if not supabase_url or supabase_url == "demo":
            if not openai_key:
                return True
        return False


# Singleton instance
demo_service = DemoService()